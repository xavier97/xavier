/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { UiCarouselColorConfig } from '../color-config.class';
export class ArrowComponent {
    /**
     * @param {?} _el
     * @param {?} _renderer2
     */
    constructor(_el, _renderer2) {
        this._el = _el;
        this._renderer2 = _renderer2;
        this.disabled = true;
        this.onArrowClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get colorConfig() {
        return this._colorConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set colorConfig(value) {
        this._colorConfig = value;
        this.createStyle();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this._colorConfig) {
            this.colorConfig = new UiCarouselColorConfig();
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.onArrowClick.emit();
            this.createStyle();
        }
    }
    /**
     * @return {?}
     */
    createStyle() {
        /** @type {?} */
        const styling = `
      .arrow::before, .arrow::after {
        background: ${this.colorConfig.arrowColor};
      }
      `;
        if (this.styleElement) {
            this._renderer2.removeChild(this._renderer2.parentNode(this.styleElement), this.styleElement);
        }
        this.styleElement = this._renderer2.createElement('style');
        this.styleElement.appendChild(this._renderer2.createText(styling));
        this._el.nativeElement.appendChild(this.styleElement);
    }
}
ArrowComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'arrow',
                template: `
    <div #arrow class="arrow" (click)="onClick()"
      [ngClass]="{'left': dir === 'left', 'right': dir === 'right', 'disabled': disabled}">
      <style #shadow-styling [innerHTML]="styling">
      </style>
      </div>
  `,
                styles: [`
  .arrow {
    position: absolute;
    height: 50px;
    width: 30px;
    opacity: .6;
    user-select: none;
    -moz-user-select: none;
    -khtml-user-select: none;
    -webkit-user-select: none;
    -o-user-select: none;
    z-index: 1000;
  }

  .arrow.right {
    right: 15px;
    top: 50%;

    transform: scaleX(-1) translateY(-50%);
    -moz-transform: scaleX(-1) translateY(-50%);
    -o-transform: scaleX(-1) translateY(-50%);
    -webkit-transform: scaleX(-1) translateY(-50%);
    -ms-transform: scaleX(-1) translateY(-50%);
    filter: FlipH;
    -ms-filter: "FlipH";
  }

  .arrow.left{
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
  }

  .arrow:hover{
    opacity: .8;
    cursor: pointer;
  }

  .arrow:before{
    content: "";
    height: 3px;
    width: 30px;
    display: block;
    position: absolute;
    top: 14px;
    transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    -webkit-transform: rotate(-45deg);
    -o-transform: rotate(-45deg);
    -ms-transform: rotate(-45deg);
  }
  .arrow:after{
    content: "";
    height: 3px;
    width: 30px;
    display: block;
    transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
    -o-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    position: absolute;
    bottom: 14px;
  }
  .arrow.disabled{
    opacity: .4;
  }
  .arrow.disabled:hover{
    opacity: .4;
    cursor: pointer;
  }`]
            }] }
];
/** @nocollapse */
ArrowComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ArrowComponent.propDecorators = {
    dir: [{ type: Input }],
    disabled: [{ type: Input }],
    colorConfig: [{ type: Input, args: ['colorConfig',] }],
    onArrowClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ArrowComponent.prototype.dir;
    /** @type {?} */
    ArrowComponent.prototype.disabled;
    /** @type {?} */
    ArrowComponent.prototype.onArrowClick;
    /** @type {?} */
    ArrowComponent.prototype.styling;
    /** @type {?} */
    ArrowComponent.prototype.styleElement;
    /**
     * @type {?}
     * @private
     */
    ArrowComponent.prototype._colorConfig;
    /**
     * @type {?}
     * @private
     */
    ArrowComponent.prototype._el;
    /**
     * @type {?}
     * @private
     */
    ArrowComponent.prototype._renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXVpLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXJyb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBeUY5RCxNQUFNLE9BQU8sY0FBYzs7Ozs7SUFxQnpCLFlBQW9CLEdBQWUsRUFBVSxVQUFxQjtRQUE5QyxRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBVztRQWpCekQsYUFBUSxHQUFHLElBQUksQ0FBQztRQVVmLGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFPRSxDQUFDOzs7O0lBaEJ2RSxJQUNJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFDRCxJQUFJLFdBQVcsQ0FBQyxLQUE0QjtRQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7OztJQVdELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQztTQUNoRDtJQUNILENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVzs7Y0FDSCxPQUFPLEdBQUc7O3NCQUVFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVTs7T0FFMUM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvRjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFELENBQUM7OztZQTFJRixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSxPQUFPO2dCQUNqQixRQUFRLEVBQUU7Ozs7OztHQU1UO3lCQUNROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTBFUDthQUNIOzs7O1lBeEZnRCxVQUFVO1lBQUUsU0FBUzs7O2tCQTZGbkUsS0FBSzt1QkFDTCxLQUFLOzBCQUNMLEtBQUssU0FBQyxhQUFhOzJCQVNuQixNQUFNOzs7O0lBWFAsNkJBQXFCOztJQUNyQixrQ0FBeUI7O0lBVXpCLHNDQUFvRTs7SUFFcEUsaUNBQXVCOztJQUN2QixzQ0FBeUI7Ozs7O0lBRXpCLHNDQUE0Qzs7Ozs7SUFFaEMsNkJBQXVCOzs7OztJQUFFLG9DQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIFZpZXdDaGlsZCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFVpQ2Fyb3VzZWxDb2xvckNvbmZpZyB9IGZyb20gJy4uL2NvbG9yLWNvbmZpZy5jbGFzcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdhcnJvdycsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgI2Fycm93IGNsYXNzPVwiYXJyb3dcIiAoY2xpY2spPVwib25DbGljaygpXCJcclxuICAgICAgW25nQ2xhc3NdPVwieydsZWZ0JzogZGlyID09PSAnbGVmdCcsICdyaWdodCc6IGRpciA9PT0gJ3JpZ2h0JywgJ2Rpc2FibGVkJzogZGlzYWJsZWR9XCI+XHJcbiAgICAgIDxzdHlsZSAjc2hhZG93LXN0eWxpbmcgW2lubmVySFRNTF09XCJzdHlsaW5nXCI+XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbYFxyXG4gIC5hcnJvdyB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICB3aWR0aDogMzBweDtcclxuICAgIG9wYWNpdHk6IC42O1xyXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgIC1vLXVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgei1pbmRleDogMTAwMDtcclxuICB9XHJcblxyXG4gIC5hcnJvdy5yaWdodCB7XHJcbiAgICByaWdodDogMTVweDtcclxuICAgIHRvcDogNTAlO1xyXG5cclxuICAgIHRyYW5zZm9ybTogc2NhbGVYKC0xKSB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgLW1vei10cmFuc2Zvcm06IHNjYWxlWCgtMSkgdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgIC1vLXRyYW5zZm9ybTogc2NhbGVYKC0xKSB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlWCgtMSkgdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgIC1tcy10cmFuc2Zvcm06IHNjYWxlWCgtMSkgdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgIGZpbHRlcjogRmxpcEg7XHJcbiAgICAtbXMtZmlsdGVyOiBcIkZsaXBIXCI7XHJcbiAgfVxyXG5cclxuICAuYXJyb3cubGVmdHtcclxuICAgIGxlZnQ6IDE1cHg7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gIH1cclxuXHJcbiAgLmFycm93OmhvdmVye1xyXG4gICAgb3BhY2l0eTogLjg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICAuYXJyb3c6YmVmb3Jle1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIGhlaWdodDogM3B4O1xyXG4gICAgd2lkdGg6IDMwcHg7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMTRweDtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgfVxyXG4gIC5hcnJvdzphZnRlcntcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBoZWlnaHQ6IDNweDtcclxuICAgIHdpZHRoOiAzMHB4O1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XHJcbiAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogMTRweDtcclxuICB9XHJcbiAgLmFycm93LmRpc2FibGVke1xyXG4gICAgb3BhY2l0eTogLjQ7XHJcbiAgfVxyXG4gIC5hcnJvdy5kaXNhYmxlZDpob3ZlcntcclxuICAgIG9wYWNpdHk6IC40O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1gXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIEFycm93Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcblxyXG4gIEBJbnB1dCgpIGRpcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gdHJ1ZTtcclxuICBASW5wdXQoJ2NvbG9yQ29uZmlnJylcclxuICBnZXQgY29sb3JDb25maWcoKTogVWlDYXJvdXNlbENvbG9yQ29uZmlnIHtcclxuICAgIHJldHVybiB0aGlzLl9jb2xvckNvbmZpZztcclxuICB9XHJcbiAgc2V0IGNvbG9yQ29uZmlnKHZhbHVlOiBVaUNhcm91c2VsQ29sb3JDb25maWcpIHtcclxuICAgIHRoaXMuX2NvbG9yQ29uZmlnID0gdmFsdWU7XHJcbiAgICB0aGlzLmNyZWF0ZVN0eWxlKCk7XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgb25BcnJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBwdWJsaWMgc3R5bGluZzogc3RyaW5nO1xyXG4gIHB1YmxpYyBzdHlsZUVsZW1lbnQ6IGFueTtcclxuXHJcbiAgcHJpdmF0ZSBfY29sb3JDb25maWc6IFVpQ2Fyb3VzZWxDb2xvckNvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyMjogUmVuZGVyZXIyKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuX2NvbG9yQ29uZmlnKSB7XHJcbiAgICAgIHRoaXMuY29sb3JDb25maWcgPSBuZXcgVWlDYXJvdXNlbENvbG9yQ29uZmlnKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNsaWNrKCkge1xyXG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMub25BcnJvd0NsaWNrLmVtaXQoKTtcclxuICAgICAgdGhpcy5jcmVhdGVTdHlsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlU3R5bGUoKSB7XHJcbiAgICBjb25zdCBzdHlsaW5nID0gYFxyXG4gICAgICAuYXJyb3c6OmJlZm9yZSwgLmFycm93OjphZnRlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogJHt0aGlzLmNvbG9yQ29uZmlnLmFycm93Q29sb3J9O1xyXG4gICAgICB9XHJcbiAgICAgIGA7XHJcblxyXG4gICAgICBpZiAodGhpcy5zdHlsZUVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlcjIucmVtb3ZlQ2hpbGQodGhpcy5fcmVuZGVyZXIyLnBhcmVudE5vZGUodGhpcy5zdHlsZUVsZW1lbnQpLCB0aGlzLnN0eWxlRWxlbWVudCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gdGhpcy5fcmVuZGVyZXIyLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3JlbmRlcmVyMi5jcmVhdGVUZXh0KHN0eWxpbmcpKTtcclxuXHJcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zdHlsZUVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdfQ==