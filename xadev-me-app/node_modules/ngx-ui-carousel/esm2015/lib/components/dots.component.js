/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
import { UiCarouselColorConfig } from '../color-config.class';
export class DotsComponent {
    constructor() {
        this.activeDot = 0;
        this.colorConfig = new UiCarouselColorConfig();
        this.position = 'left';
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.numbers = Array(this.dotsCount).fill(0).map((/**
         * @param {?} x
         * @param {?} i
         * @return {?}
         */
        (x, i) => i));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    click(index) {
        this.onClick.emit(index);
        this.activeDot = index;
    }
}
DotsComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'dots',
                template: `
    <div class="dot" [ngStyle]="{'background-color': colorConfig.dotsColor}"
      *ngFor="let number of numbers"
      (click)="click(number)"
      [class.active]="activeDot === number">
    </div>
  `,
                styles: [`
      :host{
          position: absolute;
          display: inline-block;
          z-index: 1000;
      }

      :host(.left){
          bottom: 10px;
          left: 10px;
      }

      :host(.right){
          bottom: 10px;
          right: 10px;
      }

      :host(.middle){
          bottom: 20px;
          left: 50%;
          transform: translateX(-50%);
          -webkit-transform: translateX(-50%);
          -moz-transform: translateX(-50%);
          -o-transform: translateX(-50%);
          -ms-transform: translateX(-50%);
      }

      .dot{
          height: 10px;
          width: 10px;
          border-radius: 5px;
          background: white;
          opacity: .5;
          margin: 0 4px;
          display: inline-block;
      }

      .dot:hover{
          opacity: .9;
          cursor: pointer;
      }

      .dot.active{
          opacity: .9;
      }
  `]
            }] }
];
/** @nocollapse */
DotsComponent.ctorParameters = () => [];
DotsComponent.propDecorators = {
    activeDot: [{ type: Input }],
    dotsCount: [{ type: Input }],
    colorConfig: [{ type: Input }],
    position: [{ type: HostBinding, args: ['class',] }, { type: Input }],
    onClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DotsComponent.prototype.activeDot;
    /** @type {?} */
    DotsComponent.prototype.dotsCount;
    /** @type {?} */
    DotsComponent.prototype.colorConfig;
    /** @type {?} */
    DotsComponent.prototype.position;
    /** @type {?} */
    DotsComponent.prototype.onClick;
    /** @type {?} */
    DotsComponent.prototype.numbers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG90cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdWktY2Fyb3VzZWwvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kb3RzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUE0RDlELE1BQU0sT0FBTyxhQUFhO0lBWXhCO1FBWGdCLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFFZCxnQkFBVyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUdqRCxhQUFRLEdBQUcsTUFBTSxDQUFDO1FBRWpCLFlBQU8sR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUtyRSxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRzs7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLEtBQVU7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDOzs7WUFoRkYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsUUFBUSxFQUFFOzs7Ozs7R0FNVDt5QkFDUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkNUO2FBQ0Y7Ozs7O3dCQUdFLEtBQUs7d0JBQ0wsS0FBSzswQkFDTCxLQUFLO3VCQUVMLFdBQVcsU0FBQyxPQUFPLGNBQ25CLEtBQUs7c0JBRUwsTUFBTTs7OztJQVBQLGtDQUE4Qjs7SUFDOUIsa0NBQWtDOztJQUNsQyxvQ0FBMEQ7O0lBRTFELGlDQUMyQjs7SUFFM0IsZ0NBQXFFOztJQUVyRSxnQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBVaUNhcm91c2VsQ29sb3JDb25maWcgfSBmcm9tICcuLi9jb2xvci1jb25maWcuY2xhc3MnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnZG90cycsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJkb3RcIiBbbmdTdHlsZV09XCJ7J2JhY2tncm91bmQtY29sb3InOiBjb2xvckNvbmZpZy5kb3RzQ29sb3J9XCJcclxuICAgICAgKm5nRm9yPVwibGV0IG51bWJlciBvZiBudW1iZXJzXCJcclxuICAgICAgKGNsaWNrKT1cImNsaWNrKG51bWJlcilcIlxyXG4gICAgICBbY2xhc3MuYWN0aXZlXT1cImFjdGl2ZURvdCA9PT0gbnVtYmVyXCI+XHJcbiAgICA8L2Rpdj5cclxuICBgLFxyXG4gIHN0eWxlcyA6IFtgXHJcbiAgICAgIDpob3N0e1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgei1pbmRleDogMTAwMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgOmhvc3QoLmxlZnQpe1xyXG4gICAgICAgICAgYm90dG9tOiAxMHB4O1xyXG4gICAgICAgICAgbGVmdDogMTBweDtcclxuICAgICAgfVxyXG5cclxuICAgICAgOmhvc3QoLnJpZ2h0KXtcclxuICAgICAgICAgIGJvdHRvbTogMTBweDtcclxuICAgICAgICAgIHJpZ2h0OiAxMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICA6aG9zdCgubWlkZGxlKXtcclxuICAgICAgICAgIGJvdHRvbTogMjBweDtcclxuICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gICAgICAgICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XHJcbiAgICAgICAgICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XHJcbiAgICAgICAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuZG90e1xyXG4gICAgICAgICAgaGVpZ2h0OiAxMHB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwcHg7XHJcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICAgICAgIG9wYWNpdHk6IC41O1xyXG4gICAgICAgICAgbWFyZ2luOiAwIDRweDtcclxuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgfVxyXG5cclxuICAgICAgLmRvdDpob3ZlcntcclxuICAgICAgICAgIG9wYWNpdHk6IC45O1xyXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuZG90LmFjdGl2ZXtcclxuICAgICAgICAgIG9wYWNpdHk6IC45O1xyXG4gICAgICB9XHJcbiAgYF1cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBEb3RzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKSBwdWJsaWMgYWN0aXZlRG90ID0gMDtcclxuICBASW5wdXQoKSBwdWJsaWMgZG90c0NvdW50OiBudW1iZXI7XHJcbiAgQElucHV0KCkgcHVibGljIGNvbG9yQ29uZmlnID0gbmV3IFVpQ2Fyb3VzZWxDb2xvckNvbmZpZygpO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBASW5wdXQoKSBwb3NpdGlvbiA9ICdsZWZ0JztcclxuXHJcbiAgQE91dHB1dCgpIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcblxyXG4gIHB1YmxpYyBudW1iZXJzOiBBcnJheTxudW1iZXI+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5udW1iZXJzID0gQXJyYXkodGhpcy5kb3RzQ291bnQpLmZpbGwoMCkubWFwKCh4LCBpKSA9PiBpKTtcclxuICB9XHJcblxyXG4gIGNsaWNrKGluZGV4OiBhbnkpIHtcclxuICAgIHRoaXMub25DbGljay5lbWl0KGluZGV4KTtcclxuICAgIHRoaXMuYWN0aXZlRG90ID0gaW5kZXg7XHJcbiAgfVxyXG59XHJcbiJdfQ==