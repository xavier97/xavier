/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ContentChildren, QueryList, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { UiCarouselItemComponent } from './ui-carousel-item.component';
import { UiCarouselColorConfig } from '../color-config.class';
export class UiCarouselComponent {
    /**
     * @param {?} el
     * @param {?} renderer2
     */
    constructor(el, renderer2) {
        this.el = el;
        this.renderer2 = renderer2;
        this.width = '100%';
        this.autoPlay = true;
        this.infinite = true;
        this.fade = false;
        this.isDotsVisible = true;
        this.isArrowsVisible = true;
        this.isPrintButtonVisible = false;
        this.colorConfig = new UiCarouselColorConfig();
        this.onChange = new EventEmitter();
        this.printRequest = new EventEmitter();
        this.currentItemIndex = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.speed = this.speed || 500;
        this.autoPlaySpeed = this.autoPlaySpeed || 1500;
        if (this.autoPlay) {
            this.autoPlayFunction(true);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.height) {
            /** @type {?} */
            let highest = 0;
            this.items.forEach((/**
             * @param {?} itemELement
             * @return {?}
             */
            itemELement => {
                if (itemELement.el.nativeElement.offsetHeight > highest) {
                    highest = itemELement.el.nativeElement.offsetHeight;
                }
            }));
            this.height = `${highest}px`;
        }
        else {
            this.items.forEach((/**
             * @param {?} itemELement
             * @return {?}
             */
            itemELement => {
                itemELement.el.nativeElement.style.overflowY = 'auto';
            }));
        }
        this.items.forEach((/**
         * @param {?} itemELement
         * @return {?}
         */
        itemELement => {
            itemELement.el.nativeElement.style.height = this.height;
        }));
        this.el.nativeElement.style.height = this.height;
        this.el.nativeElement.style.width = this.width;
        if (this.items && this.items.length > 0) {
            this.onChange.emit(0);
            this._width = this.items.first.el.nativeElement.offsetWidth;
        }
        this.firstItemIndex = 0;
        this.lastItemIndex = this.items.length - 1;
        if (!this.fade) {
            this.items.toArray().forEach((/**
             * @param {?} item
             * @param {?} itemIndex
             * @return {?}
             */
            (item, itemIndex) => {
                item.speed = this.speed;
                item.position = this._width * itemIndex;
                item.currentPosition = item.position;
                item.disableTransition();
                item.moveTo(item.position);
            }));
        }
        else {
            this.items.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            (item, index) => {
                item.zIndex = this.items.length - index;
                item.setzIndex(item.zIndex);
            }));
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.colorConfig = this.colorConfig;
            }));
        }), 50);
    }
    /**
     * @return {?}
     */
    onPrintClick() {
        /** @type {?} */
        const currentEl = this.items.toArray()[this.currentItemIndex].el;
        this.printRequest.emit(currentEl);
    }
    /**
     * @return {?}
     */
    next() {
        this.slideRight();
    }
    /**
     * @return {?}
     */
    prev() {
        this.slideLeft();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    goTo(index) {
        if (!this.fade) {
            this.slideTo(index);
        }
        else {
            this.fadeTo(index);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    rotateRightTo(index) {
        while (index !== this.lastItemIndex) {
            this.rotateRight();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    rotateLeftTo(index) {
        while (index !== this.firstItemIndex) {
            this.rotateLeft();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    slideTo(index) {
        this.onChange.emit((index + this.items.length) % this.items.length);
        /** @type {?} */
        const steps = this.currentItemIndex - index;
        if (this.infinite) {
            if (steps > 0) {
                this.rotateRightTo(this.currentItemIndex);
            }
            else if (steps < 0) {
                this.rotateLeftTo(this.currentItemIndex);
            }
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.enableTransition();
            this.items.forEach((/**
             * @param {?} item
             * @param {?} i
             * @return {?}
             */
            (item, i) => {
                item.position += this._width * (steps);
                item.currentPosition = item.position;
                item.moveTo(item.position);
            }));
            this.currentItemIndex = (index + this.items.length) % this.items.length;
        }), 50);
    }
    /**
     * @return {?}
     */
    slideLeft() {
        if (!this.isSliding) {
            this.isSliding = true;
            if (!this.infinite) {
                if (this.currentItemIndex === 0) {
                    this.slideToPrevPosition();
                    return;
                }
            }
            this.slideTo(this.currentItemIndex - 1);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isSliding = false;
            }), this.speed);
        }
    }
    /**
     * @return {?}
     */
    slideRight() {
        if (!this.isSliding) {
            this.isSliding = true;
            if (!this.infinite) {
                if (this.currentItemIndex === this.items.length - 1) {
                    this.slideToPrevPosition();
                    return;
                }
            }
            this.slideTo(this.currentItemIndex + 1);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isSliding = false;
            }), this.speed);
        }
    }
    /**
     * @return {?}
     */
    slideToPrevPosition() {
        this.enableTransition();
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.currentPosition = item.position;
            item.moveTo(item.position);
        }));
    }
    /**
     * @return {?}
     */
    disableTransition() {
        this.items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.disableTransition();
        }));
    }
    /**
     * @return {?}
     */
    enableTransition() {
        this.items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.enableTransition();
        }));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getItemByIndex(index) {
        return this.items.find((/**
         * @param {?} item
         * @param {?} i
         * @return {?}
         */
        (item, i) => {
            return i === index;
        }));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getIndexByItem(item) {
        return this.items.toArray().indexOf(item);
    }
    /**
     * @param {?} n
     * @return {?}
     */
    rotateRightNTimes(n) {
        for (let i = 0; i < n; i++) {
            this.rotateRight();
        }
    }
    /**
     * @param {?} n
     * @return {?}
     */
    rotateLeftNTimes(n) {
        for (let i = 0; i < n; i++) {
            this.rotateLeft();
        }
    }
    /**
     * @return {?}
     */
    rotateRight() {
        /** @type {?} */
        const firstItemRef = this.getItemByIndex(this.firstItemIndex);
        /** @type {?} */
        const lastItemRef = this.getItemByIndex(this.lastItemIndex);
        if (!this.fade) {
            lastItemRef.position = firstItemRef.position - this._width;
            lastItemRef.currentPosition = lastItemRef.position;
            lastItemRef.disableTransition();
            lastItemRef.moveTo(lastItemRef.position);
            this.firstItemIndex = this.lastItemIndex;
            this.lastItemIndex = (this.lastItemIndex - 1 + this.items.length) % this.items.length;
        }
    }
    /**
     * @return {?}
     */
    rotateLeft() {
        /** @type {?} */
        const firstItemRef = this.getItemByIndex(this.firstItemIndex);
        /** @type {?} */
        const lastItemRef = this.getItemByIndex(this.lastItemIndex);
        firstItemRef.position = lastItemRef.position + this._width;
        firstItemRef.currentPosition = firstItemRef.position;
        firstItemRef.disableTransition();
        firstItemRef.moveTo(firstItemRef.position);
        this.lastItemIndex = this.firstItemIndex;
        this.firstItemIndex = (this.lastItemIndex + 1) % this.items.length;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    fadeTo(index) {
        this.onChange.emit(index);
        /** @type {?} */
        const firstItem = this.getItemByIndex(this.currentItemIndex);
        /** @type {?} */
        const targetItem = this.getItemByIndex(index);
        /** @type {?} */
        const highestZIndex = this.items.length;
        targetItem.zIndex = firstItem.zIndex + 1;
        targetItem.setzIndex(targetItem.zIndex);
        targetItem.disableTransition();
        targetItem.fadeIn(this.speed);
        this.currentItemIndex = index;
    }
    /**
     * @return {?}
     */
    fadeRight() {
        /** @type {?} */
        const newIndex = (this.currentItemIndex + 1) % this.items.length;
        this.fadeTo(newIndex);
        this.currentItemIndex = newIndex;
    }
    /**
     * @return {?}
     */
    fadeLeft() {
        /** @type {?} */
        const newIndex = (this.currentItemIndex - 1 + this.items.length) % this.items.length;
        this.fadeTo(newIndex);
        this.currentItemIndex = newIndex;
    }
    // is item first visually and not necessary first in the dom (QueryList)
    /**
     * @param {?} index
     * @return {?}
     */
    isItemFirst(index) {
        return this.firstItemIndex === index;
    }
    // is item last visually and not necessary last in the dom (QueryList)
    /**
     * @param {?} index
     * @return {?}
     */
    isItemLast(index) {
        return this.lastItemIndex === index;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.rePosition();
    }
    /**
     * @return {?}
     */
    rePosition() {
        /** @type {?} */
        const items = this.items.toArray();
        if (this.items && this.items.length > 0) {
            this._width = this.items.first.el.nativeElement.offsetWidth;
        }
        items.sort((/**
         * @param {?} item1
         * @param {?} item2
         * @return {?}
         */
        (item1, item2) => {
            if (item1.position > item2.position) {
                return 1;
            }
            else if (item1.position < item2.position) {
                return -1;
            }
            else {
                return 0;
            }
        }));
        /** @type {?} */
        const currentItem = this.getItemByIndex(this.currentItemIndex);
        /** @type {?} */
        const currentItemIndex = items.indexOf(currentItem);
        for (let i = currentItemIndex; i < items.length + currentItemIndex; i++) {
            /** @type {?} */
            const item = items[(i + items.length) % items.length];
            item.position = ((i + items.length) % items.length - currentItemIndex) * this._width;
            item.disableTransition();
            item.moveTo(item.position);
        }
    }
    /**
     * @param {?} shouldAutoPlay
     * @return {?}
     */
    autoPlayFunction(shouldAutoPlay) {
        if (this.autoPlay) {
            if (shouldAutoPlay) {
                this.interval = setInterval((/**
                 * @return {?}
                 */
                () => {
                    this.next();
                }), this.autoPlaySpeed);
            }
            else {
                clearInterval(this.interval);
            }
        }
    }
}
UiCarouselComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-ui-carousel',
                template: `
    <div (mouseenter)="(autoPlay)?autoPlayFunction(false):null" (mouseleave)="(autoPlay)?autoPlayFunction(true):null">
      <ng-content></ng-content>
      <dots
        *ngIf="isDotsVisible && items.length > 1"
        [dotsCount]="items.length"
        position="middle"
        [activeDot]="currentItemIndex"
        [colorConfig]="colorConfig"
        (onClick)="goTo($event)"></dots>
      <arrow *ngIf="isArrowsVisible && items.length > 1" dir="left" (onArrowClick)="prev()" [disabled]="false" [colorConfig]="colorConfig"></arrow>
      <arrow *ngIf="isArrowsVisible && items.length > 1" dir="right" (onArrowClick)="next()" [disabled]="false" [colorConfig]="colorConfig"></arrow>
      <print-button
        *ngIf="isPrintButtonVisible"
        (onButtonClick)="onPrintClick()"
        [colorConfig]="colorConfig"
        [disabled]="false"></print-button>
    </div>
  `,
                styles: [`
    :host {
      display: block;
      overflow: hidden;
      position: relative;
    }
  `]
            }] }
];
/** @nocollapse */
UiCarouselComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
UiCarouselComponent.propDecorators = {
    height: [{ type: Input }],
    width: [{ type: Input }],
    speed: [{ type: Input }],
    autoPlay: [{ type: Input }],
    autoPlaySpeed: [{ type: Input }],
    infinite: [{ type: Input }],
    fade: [{ type: Input }],
    isDotsVisible: [{ type: Input }],
    isArrowsVisible: [{ type: Input }],
    isPrintButtonVisible: [{ type: Input }],
    colorConfig: [{ type: Input }],
    onChange: [{ type: Output }],
    printRequest: [{ type: Output }],
    items: [{ type: ContentChildren, args: [UiCarouselItemComponent,] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    UiCarouselComponent.prototype.height;
    /** @type {?} */
    UiCarouselComponent.prototype.width;
    /** @type {?} */
    UiCarouselComponent.prototype.speed;
    /** @type {?} */
    UiCarouselComponent.prototype.autoPlay;
    /** @type {?} */
    UiCarouselComponent.prototype.autoPlaySpeed;
    /** @type {?} */
    UiCarouselComponent.prototype.infinite;
    /** @type {?} */
    UiCarouselComponent.prototype.fade;
    /** @type {?} */
    UiCarouselComponent.prototype.isDotsVisible;
    /** @type {?} */
    UiCarouselComponent.prototype.isArrowsVisible;
    /** @type {?} */
    UiCarouselComponent.prototype.isPrintButtonVisible;
    /** @type {?} */
    UiCarouselComponent.prototype.colorConfig;
    /** @type {?} */
    UiCarouselComponent.prototype.onChange;
    /** @type {?} */
    UiCarouselComponent.prototype.printRequest;
    /** @type {?} */
    UiCarouselComponent.prototype.items;
    /** @type {?} */
    UiCarouselComponent.prototype.currentItemIndex;
    /** @type {?} */
    UiCarouselComponent.prototype.interval;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype._width;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.firstItemIndex;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.lastItemIndex;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.isSliding;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,