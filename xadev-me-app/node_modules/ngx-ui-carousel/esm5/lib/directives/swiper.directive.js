/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Renderer2, Output, EventEmitter } from '@angular/core';
/** @type {?} */
var ZERO = 0.000000000001;
var SwiperDirective = /** @class */ (function () {
    function SwiperDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.isDown = false;
        this.initialPos = ZERO;
        this.lastPos = ZERO;
        this.swipeDistance = ZERO;
        this.firstSwipeDate = Date.now();
        this.onSwipeRight = new EventEmitter();
        this.onSwipeLeft = new EventEmitter();
        this.onSwipeStart = new EventEmitter();
        this.onSwipeEnd = new EventEmitter();
        this.swipeLeft = new EventEmitter();
        this.swipeRight = new EventEmitter();
    }
    // tslint:disable-next-line:use-life-cycle-interface
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    SwiperDirective.prototype.ngOnInit = 
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    function () {
        this.onSwipeEnd.subscribe((/**
         * @return {?}
         */
        function () {
        }));
        this.swipeLeft.subscribe((/**
         * @return {?}
         */
        function () {
            SwiperDirective.canISwipe = false;
            setTimeout((/**
             * @return {?}
             */
            function () {
                SwiperDirective.canISwipe = true;
            }), 350);
        }));
        this.swipeRight.subscribe((/**
         * @return {?}
         */
        function () {
            SwiperDirective.canISwipe = false;
            setTimeout((/**
             * @return {?}
             */
            function () {
                SwiperDirective.canISwipe = true;
            }), 350);
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!SwiperDirective.canISwipe) {
            return;
        }
        this.firstSwipeDate = Date.now();
        this.isDown = true;
        this.initialPos = event.clientX;
        this.swipeDistance = 0;
        this.onSwipeStart.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isDown) {
            return;
        }
        this.initialPos = this.lastPos = ZERO;
        this.isDown = false;
        if (this.swipeDistance > 100) {
            this.swipeLeft.emit();
        }
        else if (this.swipeDistance < -100) {
            this.swipeRight.emit();
        }
        else {
            this.onSwipeEnd.emit();
        }
        this.swipeDistance = ZERO;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isDown) {
            /** @type {?} */
            var swipeFrameDistance = event.clientX - this.initialPos - this.lastPos;
            this.swipeDistance += swipeFrameDistance;
            this.lastPos = event.clientX - this.initialPos;
            if (swipeFrameDistance > 0) {
                this.onSwipeLeft.emit(swipeFrameDistance);
            }
            else {
                this.onSwipeRight.emit(swipeFrameDistance);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!SwiperDirective.canISwipe) {
            return;
        }
        /** @type {?} */
        var touch = event.touches[0] || event.changedTouches[0];
        /** @type {?} */
        var swipeFrameDistance = touch.clientX - this.initialPos - this.lastPos;
        swipeFrameDistance = swipeFrameDistance < 30 ? swipeFrameDistance : 30;
        this.swipeDistance += swipeFrameDistance;
        this.lastPos = touch.clientX - this.initialPos;
        if (swipeFrameDistance > 0) {
            this.onSwipeLeft.emit(swipeFrameDistance);
        }
        else {
            this.onSwipeRight.emit(swipeFrameDistance);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!SwiperDirective.canISwipe) {
            return;
        }
        /** @type {?} */
        var touch = event.touches[0] || event.changedTouches[0];
        this.firstSwipeDate = Date.now();
        this.initialPos = touch.clientX;
        this.swipeDistance = ZERO;
        this.onSwipeStart.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.initialPos = this.lastPos = ZERO;
        if (this.swipeDistance > 100) {
            this.swipeLeft.emit();
        }
        else if (this.swipeDistance < -100) {
            this.swipeRight.emit();
        }
        else {
            this.onSwipeEnd.emit();
        }
        this.swipeDistance = ZERO;
    };
    SwiperDirective.canISwipe = true;
    SwiperDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[libSwiper]',
                    exportAs: 'swiper'
                },] }
    ];
    /** @nocollapse */
    SwiperDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SwiperDirective.propDecorators = {
        onSwipeRight: [{ type: Output }],
        onSwipeLeft: [{ type: Output }],
        onSwipeStart: [{ type: Output }],
        onSwipeEnd: [{ type: Output }],
        swipeLeft: [{ type: Output }],
        swipeRight: [{ type: Output }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onMouseUp: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
        onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }],
        onTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }]
    };
    return SwiperDirective;
}());
export { SwiperDirective };
if (false) {
    /** @type {?} */
    SwiperDirective.canISwipe;
    /** @type {?} */
    SwiperDirective.prototype.isDown;
    /** @type {?} */
    SwiperDirective.prototype.initialPos;
    /** @type {?} */
    SwiperDirective.prototype.lastPos;
    /** @type {?} */
    SwiperDirective.prototype.swipeDistance;
    /** @type {?} */
    SwiperDirective.prototype.firstSwipeDate;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeRight;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeLeft;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeStart;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeEnd;
    /** @type {?} */
    SwiperDirective.prototype.swipeLeft;
    /** @type {?} */
    SwiperDirective.prototype.swipeRight;
    /**
     * @type {?}
     * @private
     */
    SwiperDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SwiperDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,