/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { UiCarouselColorConfig } from '../color-config.class';
var PrintButtonComponent = /** @class */ (function () {
    function PrintButtonComponent(_el, _renderer2) {
        this._el = _el;
        this._renderer2 = _renderer2;
        this.disabled = true;
        this.colorConfig = new UiCarouselColorConfig();
        this.onButtonClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PrintButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PrintButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.onButtonClick.emit();
        }
    };
    PrintButtonComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'print-button',
                    template: "\n    <div #printButton\n    class=\"print-button\"\n    (click)=\"onClick()\"\n    [ngClass]=\"{'disabled': disabled}\"\n    [ngStyle]=\"{'background-color': colorConfig.printButtonBackgroundColor}\">\n      <span [ngStyle]=\"{'color': colorConfig.printButtonFontColor}\">print</span>\n    </div>\n  ",
                    styles: ["\n  .print-button {\n    position: absolute;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n    border-radius: 5px;\n    width: 60px;\n    opacity: .6;\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none;\n    z-index: 1000;\n    right: 20px;\n    top: 20px;\n  }\n\n  .print-button.disabled{\n    opacity: .4;\n  }\n  .print-button:hover{\n    opacity: .9;\n    cursor: pointer;\n  }\n  .print-button.disabled:hover{\n    opacity: .4;\n    cursor: pointer;\n  }"]
                }] }
    ];
    /** @nocollapse */
    PrintButtonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    PrintButtonComponent.propDecorators = {
        dir: [{ type: Input }],
        disabled: [{ type: Input }],
        colorConfig: [{ type: Input }],
        onButtonClick: [{ type: Output }]
    };
    return PrintButtonComponent;
}());
export { PrintButtonComponent };
if (false) {
    /** @type {?} */
    PrintButtonComponent.prototype.dir;
    /** @type {?} */
    PrintButtonComponent.prototype.disabled;
    /** @type {?} */
    PrintButtonComponent.prototype.colorConfig;
    /** @type {?} */
    PrintButtonComponent.prototype.onButtonClick;
    /** @type {?} */
    PrintButtonComponent.prototype.styling;
    /** @type {?} */
    PrintButtonComponent.prototype.styleElement;
    /**
     * @type {?}
     * @private
     */
    PrintButtonComponent.prototype._el;
    /**
     * @type {?}
     * @private
     */
    PrintButtonComponent.prototype._renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXVpLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcHJpbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFOUQ7SUFzREUsOEJBQW9CLEdBQWUsRUFBVSxVQUFxQjtRQUE5QyxRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBVztRQVJ6RCxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLGdCQUFXLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBRXpDLGtCQUFhLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFLQyxDQUFDOzs7O0lBRXZFLHVDQUFROzs7SUFBUjtJQUNBLENBQUM7Ozs7SUFFRCxzQ0FBTzs7O0lBQVA7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQzs7Z0JBL0RGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSwrU0FRVDs2QkFDUSxna0JBNkJQO2lCQUNIOzs7O2dCQTdDZ0QsVUFBVTtnQkFBRSxTQUFTOzs7c0JBZ0RuRSxLQUFLOzJCQUNMLEtBQUs7OEJBQ0wsS0FBSztnQ0FFTCxNQUFNOztJQWVULDJCQUFDO0NBQUEsQUFoRUQsSUFnRUM7U0FwQlksb0JBQW9COzs7SUFDL0IsbUNBQXFCOztJQUNyQix3Q0FBeUI7O0lBQ3pCLDJDQUFtRDs7SUFFbkQsNkNBQXFFOztJQUVyRSx1Q0FBdUI7O0lBQ3ZCLDRDQUF5Qjs7Ozs7SUFFYixtQ0FBdUI7Ozs7O0lBQUUsMENBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFVpQ2Fyb3VzZWxDb2xvckNvbmZpZyB9IGZyb20gJy4uL2NvbG9yLWNvbmZpZy5jbGFzcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdwcmludC1idXR0b24nLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2ICNwcmludEJ1dHRvblxyXG4gICAgY2xhc3M9XCJwcmludC1idXR0b25cIlxyXG4gICAgKGNsaWNrKT1cIm9uQ2xpY2soKVwiXHJcbiAgICBbbmdDbGFzc109XCJ7J2Rpc2FibGVkJzogZGlzYWJsZWR9XCJcclxuICAgIFtuZ1N0eWxlXT1cInsnYmFja2dyb3VuZC1jb2xvcic6IGNvbG9yQ29uZmlnLnByaW50QnV0dG9uQmFja2dyb3VuZENvbG9yfVwiPlxyXG4gICAgICA8c3BhbiBbbmdTdHlsZV09XCJ7J2NvbG9yJzogY29sb3JDb25maWcucHJpbnRCdXR0b25Gb250Q29sb3J9XCI+cHJpbnQ8L3NwYW4+XHJcbiAgICA8L2Rpdj5cclxuICBgLFxyXG4gIHN0eWxlczogW2BcclxuICAucHJpbnQtYnV0dG9uIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGhlaWdodDogMzBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgd2lkdGg6IDYwcHg7XHJcbiAgICBvcGFjaXR5OiAuNjtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAtby11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgIHotaW5kZXg6IDEwMDA7XHJcbiAgICByaWdodDogMjBweDtcclxuICAgIHRvcDogMjBweDtcclxuICB9XHJcblxyXG4gIC5wcmludC1idXR0b24uZGlzYWJsZWR7XHJcbiAgICBvcGFjaXR5OiAuNDtcclxuICB9XHJcbiAgLnByaW50LWJ1dHRvbjpob3ZlcntcclxuICAgIG9wYWNpdHk6IC45O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICAucHJpbnQtYnV0dG9uLmRpc2FibGVkOmhvdmVye1xyXG4gICAgb3BhY2l0eTogLjQ7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfWBdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUHJpbnRCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpIGRpcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gdHJ1ZTtcclxuICBASW5wdXQoKSBjb2xvckNvbmZpZyA9IG5ldyBVaUNhcm91c2VsQ29sb3JDb25maWcoKTtcclxuXHJcbiAgQE91dHB1dCgpIG9uQnV0dG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIHB1YmxpYyBzdHlsaW5nOiBzdHJpbmc7XHJcbiAgcHVibGljIHN0eWxlRWxlbWVudDogYW55O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXIyOiBSZW5kZXJlcjIpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2soKSB7XHJcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgdGhpcy5vbkJ1dHRvbkNsaWNrLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXX0=