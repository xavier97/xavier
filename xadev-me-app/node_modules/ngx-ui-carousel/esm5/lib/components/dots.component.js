/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
import { UiCarouselColorConfig } from '../color-config.class';
var DotsComponent = /** @class */ (function () {
    function DotsComponent() {
        this.activeDot = 0;
        this.colorConfig = new UiCarouselColorConfig();
        this.position = 'left';
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DotsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.numbers = Array(this.dotsCount).fill(0).map((/**
         * @param {?} x
         * @param {?} i
         * @return {?}
         */
        function (x, i) { return i; }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DotsComponent.prototype.click = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.onClick.emit(index);
        this.activeDot = index;
    };
    DotsComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'dots',
                    template: "\n    <div class=\"dot\" [ngStyle]=\"{'background-color': colorConfig.dotsColor}\"\n      *ngFor=\"let number of numbers\"\n      (click)=\"click(number)\"\n      [class.active]=\"activeDot === number\">\n    </div>\n  ",
                    styles: ["\n      :host{\n          position: absolute;\n          display: inline-block;\n          z-index: 1000;\n      }\n\n      :host(.left){\n          bottom: 10px;\n          left: 10px;\n      }\n\n      :host(.right){\n          bottom: 10px;\n          right: 10px;\n      }\n\n      :host(.middle){\n          bottom: 20px;\n          left: 50%;\n          transform: translateX(-50%);\n          -webkit-transform: translateX(-50%);\n          -moz-transform: translateX(-50%);\n          -o-transform: translateX(-50%);\n          -ms-transform: translateX(-50%);\n      }\n\n      .dot{\n          height: 10px;\n          width: 10px;\n          border-radius: 5px;\n          background: white;\n          opacity: .5;\n          margin: 0 4px;\n          display: inline-block;\n      }\n\n      .dot:hover{\n          opacity: .9;\n          cursor: pointer;\n      }\n\n      .dot.active{\n          opacity: .9;\n      }\n  "]
                }] }
    ];
    /** @nocollapse */
    DotsComponent.ctorParameters = function () { return []; };
    DotsComponent.propDecorators = {
        activeDot: [{ type: Input }],
        dotsCount: [{ type: Input }],
        colorConfig: [{ type: Input }],
        position: [{ type: HostBinding, args: ['class',] }, { type: Input }],
        onClick: [{ type: Output }]
    };
    return DotsComponent;
}());
export { DotsComponent };
if (false) {
    /** @type {?} */
    DotsComponent.prototype.activeDot;
    /** @type {?} */
    DotsComponent.prototype.dotsCount;
    /** @type {?} */
    DotsComponent.prototype.colorConfig;
    /** @type {?} */
    DotsComponent.prototype.position;
    /** @type {?} */
    DotsComponent.prototype.onClick;
    /** @type {?} */
    DotsComponent.prototype.numbers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG90cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdWktY2Fyb3VzZWwvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kb3RzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFOUQ7SUFzRUU7UUFYZ0IsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUVkLGdCQUFXLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBR2pELGFBQVEsR0FBRyxNQUFNLENBQUM7UUFFakIsWUFBTyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0lBS3JFLENBQUM7Ozs7SUFFRCxnQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7Ozs7O1FBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxFQUFELENBQUMsRUFBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7O0lBRUQsNkJBQUs7Ozs7SUFBTCxVQUFNLEtBQVU7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDOztnQkFoRkYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsTUFBTTtvQkFDaEIsUUFBUSxFQUFFLDZOQU1UOzZCQUNTLDA2QkE2Q1Q7aUJBQ0Y7Ozs7OzRCQUdFLEtBQUs7NEJBQ0wsS0FBSzs4QkFDTCxLQUFLOzJCQUVMLFdBQVcsU0FBQyxPQUFPLGNBQ25CLEtBQUs7MEJBRUwsTUFBTTs7SUFlVCxvQkFBQztDQUFBLEFBakZELElBaUZDO1NBdkJZLGFBQWE7OztJQUN4QixrQ0FBOEI7O0lBQzlCLGtDQUFrQzs7SUFDbEMsb0NBQTBEOztJQUUxRCxpQ0FDMkI7O0lBRTNCLGdDQUFxRTs7SUFFckUsZ0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVWlDYXJvdXNlbENvbG9yQ29uZmlnIH0gZnJvbSAnLi4vY29sb3ItY29uZmlnLmNsYXNzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2RvdHMnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiZG90XCIgW25nU3R5bGVdPVwieydiYWNrZ3JvdW5kLWNvbG9yJzogY29sb3JDb25maWcuZG90c0NvbG9yfVwiXHJcbiAgICAgICpuZ0Zvcj1cImxldCBudW1iZXIgb2YgbnVtYmVyc1wiXHJcbiAgICAgIChjbGljayk9XCJjbGljayhudW1iZXIpXCJcclxuICAgICAgW2NsYXNzLmFjdGl2ZV09XCJhY3RpdmVEb3QgPT09IG51bWJlclwiPlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXMgOiBbYFxyXG4gICAgICA6aG9zdHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgIHotaW5kZXg6IDEwMDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIDpob3N0KC5sZWZ0KXtcclxuICAgICAgICAgIGJvdHRvbTogMTBweDtcclxuICAgICAgICAgIGxlZnQ6IDEwcHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIDpob3N0KC5yaWdodCl7XHJcbiAgICAgICAgICBib3R0b206IDEwcHg7XHJcbiAgICAgICAgICByaWdodDogMTBweDtcclxuICAgICAgfVxyXG5cclxuICAgICAgOmhvc3QoLm1pZGRsZSl7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcclxuICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gICAgICAgICAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gICAgICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmRvdHtcclxuICAgICAgICAgIGhlaWdodDogMTBweDtcclxuICAgICAgICAgIHdpZHRoOiAxMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAgICAgICBvcGFjaXR5OiAuNTtcclxuICAgICAgICAgIG1hcmdpbjogMCA0cHg7XHJcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5kb3Q6aG92ZXJ7XHJcbiAgICAgICAgICBvcGFjaXR5OiAuOTtcclxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmRvdC5hY3RpdmV7XHJcbiAgICAgICAgICBvcGFjaXR5OiAuOTtcclxuICAgICAgfVxyXG4gIGBdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRG90c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KCkgcHVibGljIGFjdGl2ZURvdCA9IDA7XHJcbiAgQElucHV0KCkgcHVibGljIGRvdHNDb3VudDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBjb2xvckNvbmZpZyA9IG5ldyBVaUNhcm91c2VsQ29sb3JDb25maWcoKTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgQElucHV0KCkgcG9zaXRpb24gPSAnbGVmdCc7XHJcblxyXG4gIEBPdXRwdXQoKSBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICBwdWJsaWMgbnVtYmVyczogQXJyYXk8bnVtYmVyPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMubnVtYmVycyA9IEFycmF5KHRoaXMuZG90c0NvdW50KS5maWxsKDApLm1hcCgoeCwgaSkgPT4gaSk7XHJcbiAgfVxyXG5cclxuICBjbGljayhpbmRleDogYW55KSB7XHJcbiAgICB0aGlzLm9uQ2xpY2suZW1pdChpbmRleCk7XHJcbiAgICB0aGlzLmFjdGl2ZURvdCA9IGluZGV4O1xyXG4gIH1cclxufVxyXG4iXX0=