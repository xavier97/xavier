(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-ui-carousel', ['exports', '@angular/common', '@angular/core'], factory) :
    (factory((global['ngx-ui-carousel'] = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiCarouselService = /** @class */ (function () {
        function UiCarouselService() {
        }
        UiCarouselService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        UiCarouselService.ctorParameters = function () { return []; };
        /** @nocollapse */ UiCarouselService.ngInjectableDef = i0.defineInjectable({ factory: function UiCarouselService_Factory() { return new UiCarouselService(); }, token: UiCarouselService, providedIn: "root" });
        return UiCarouselService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UILazyloadDirective = /** @class */ (function () {
        function UILazyloadDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        UILazyloadDirective.prototype.load = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var img = this.el.nativeElement;
                if (img.src) {
                    return;
                }
                img.src = this.imgUrl;
            };
        UILazyloadDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[libUiLazyLoad]',
                        exportAs: 'ui-lazy-load'
                    },] }
        ];
        /** @nocollapse */
        UILazyloadDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        UILazyloadDirective.propDecorators = {
            imgUrl: [{ type: i0.Input, args: ['imgUrl',] }]
        };
        return UILazyloadDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiCarouselColorConfig = /** @class */ (function () {
        function UiCarouselColorConfig(dotsColor, arrowColor, itemBackgroundColor, printButtonBackgroundColor, printButtonFontColor) {
            this.dotsColor = dotsColor ? dotsColor : '#F5F5F5';
            this.arrowColor = arrowColor ? arrowColor : '#F5F5F5';
            this.itemBackgroundColor = itemBackgroundColor ? itemBackgroundColor : '#CCCCCC';
            this.printButtonBackgroundColor = printButtonBackgroundColor ? printButtonBackgroundColor : '#3d3d3d';
            this.printButtonFontColor = printButtonFontColor ? printButtonFontColor : '#FFFFFF';
        }
        return UiCarouselColorConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiCarouselItemComponent = /** @class */ (function () {
        function UiCarouselItemComponent(renderer, ref) {
            this.renderer = renderer;
            this.ref = ref;
            this.currentPosition = 0;
            this.position = 0;
            this.colorConfig = new UiCarouselColorConfig();
        }
        /**
         * @param {?} position
         * @return {?}
         */
        UiCarouselItemComponent.prototype.moveTo = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this.renderer.setStyle(this.el.nativeElement, 'transform', 'translate3d(' + position + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-webkit-transform', 'translate3d(' + position + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-moz-transform', 'translate3d(' + position + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-o-transform', 'translate3d(' + position + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-ms-transform', 'translate3d(' + position + 'px, 0px, 0px)');
            };
        /**
         * @param {?} distance
         * @return {?}
         */
        UiCarouselItemComponent.prototype.moveBy = /**
         * @param {?} distance
         * @return {?}
         */
            function (distance) {
                this.renderer.setStyle(this.el.nativeElement, 'transform', 'translate3d(' + distance + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-webkit-transform', 'translate3d(' + distance + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-moz-transform', 'translate3d(' + distance + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-o-transform', 'translate3d(' + distance + 'px, 0px, 0px)');
                this.renderer.setStyle(this.el.nativeElement, '-ms-transform', 'translate3d(' + distance + 'px, 0px, 0px)');
            };
        /**
         * @param {?} zIndex
         * @return {?}
         */
        UiCarouselItemComponent.prototype.setzIndex = /**
         * @param {?} zIndex
         * @return {?}
         */
            function (zIndex) {
                this.renderer.setStyle(this.el.nativeElement, 'z-index', zIndex);
            };
        /**
         * @return {?}
         */
        UiCarouselItemComponent.prototype.disableTransition = /**
         * @return {?}
         */
            function () {
                this.renderer.setStyle(this.el.nativeElement, 'transition', 'none');
                this.renderer.setStyle(this.el.nativeElement, '-moz-transition', 'none');
                this.renderer.setStyle(this.el.nativeElement, '-webkit-transition', 'none');
                this.renderer.setStyle(this.el.nativeElement, '-o-transition', 'none');
                this.renderer.setStyle(this.el.nativeElement, '-ms-transition', 'none');
            };
        /**
         * @return {?}
         */
        UiCarouselItemComponent.prototype.enableTransition = /**
         * @return {?}
         */
            function () {
                this.renderer.setStyle(this.el.nativeElement, 'transition', 'transform');
                this.renderer.setStyle(this.el.nativeElement, '-moz-transition', 'transform');
                this.renderer.setStyle(this.el.nativeElement, '-webkit-transition', 'transform');
                this.renderer.setStyle(this.el.nativeElement, '-o-transition', 'transform');
                this.renderer.setStyle(this.el.nativeElement, '-ms-transition', 'transform');
                this.renderer.setStyle(this.el.nativeElement, 'transition-duration', this.speed + 'ms');
                this.renderer.setStyle(this.el.nativeElement, '-moz-transition-duration', this.speed + 'ms');
                this.renderer.setStyle(this.el.nativeElement, '-webkit-transition-duration', this.speed + 'ms');
                this.renderer.setStyle(this.el.nativeElement, '-o-transition-duration', this.speed + 'ms');
                this.renderer.setStyle(this.el.nativeElement, '-ms-transition-duration', this.speed + 'ms');
            };
        /**
         * @param {?} duration
         * @return {?}
         */
        UiCarouselItemComponent.prototype.fadeOut = /**
         * @param {?} duration
         * @return {?}
         */
            function (duration) {
                var _this = this;
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    _this.renderer.setStyle(_this.el.nativeElement, 'opacity', '0');
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.renderer.setStyle(_this.el.nativeElement, 'opacity', '1');
                        resolve();
                    }), duration);
                }));
            };
        /**
         * @param {?} duration
         * @return {?}
         */
        UiCarouselItemComponent.prototype.fadeIn = /**
         * @param {?} duration
         * @return {?}
         */
            function (duration) {
                var _this = this;
                this.renderer.setStyle(this.el.nativeElement, 'opacity', '0');
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.renderer.setStyle(_this.el.nativeElement, 'transition', 'opacity ' + duration + 'ms');
                    _this.renderer.setStyle(_this.el.nativeElement, 'opacity', '1');
                }), 0);
            };
        /**
         * @return {?}
         */
        UiCarouselItemComponent.prototype.lazyLoad = /**
         * @return {?}
         */
            function () {
                this.lazyLoadedImages.forEach(( /**
                 * @param {?} img
                 * @return {?}
                 */function (img) {
                    img.load();
                }));
            };
        UiCarouselItemComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'ngx-ui-carousel-item',
                        template: "\n    <div #carouselItem\n        [ngStyle]=\"{'background-color': backgroundColor ? backgroundColor : colorConfig.itemBackgroundColor}\"\n        class=\"ui-carousel-item fade\" tabindex=\"-1\"\n        style=\"outline: none\">\n      <ng-content></ng-content>\n    </div>\n  ",
                        styles: ["\n  :host {\n    display:block!important;\n  }\n\n  .ui-carousel-item{\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none;\n    -ms-user-select: none;\n  }\n\n  .transition{\n    transition: transform;\n    -moz-transition: transform;\n    -webkit-transition: transform;\n    -o-transition: transform;\n    -ms-transition: transform;\n    transition-timing-function: ease;\n    -moz-transition-timing-function: ease;\n    -o-transition-timing-function: ease;\n    -ms-transition-timing-function: ease;\n  }\n\n  .ui-carousel-item{\n    // height: 100%;\n    width: 100%;\n    position: absolute;\n    overflow: hidden;\n  }\n\n  .fade{\n    opacity: 1;\n    -webkit-transition: opacity .5s ease-in;\n    -moz-transition: opacity .5s ease-in;\n    -ms-transition: opacity .5s ease-in;\n    -o-transition: opacity .5s ease-in;\n    transition: opacity .5s ease-in;\n  }\n\n  .fade-out{\n    opacity: 0;\n  }\n  "]
                    }] }
        ];
        /** @nocollapse */
        UiCarouselItemComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef }
            ];
        };
        UiCarouselItemComponent.propDecorators = {
            el: [{ type: i0.ViewChild, args: ['carouselItem',] }],
            lazyLoadedImages: [{ type: i0.ContentChild, args: [UILazyloadDirective,] }],
            backgroundColor: [{ type: i0.Input }]
        };
        return UiCarouselItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiCarouselComponent = /** @class */ (function () {
        function UiCarouselComponent(el, renderer2) {
            this.el = el;
            this.renderer2 = renderer2;
            this.width = '100%';
            this.autoPlay = true;
            this.infinite = true;
            this.fade = false;
            this.isDotsVisible = true;
            this.isArrowsVisible = true;
            this.isPrintButtonVisible = false;
            this.colorConfig = new UiCarouselColorConfig();
            this.onChange = new i0.EventEmitter();
            this.printRequest = new i0.EventEmitter();
            this.currentItemIndex = 0;
        }
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.speed = this.speed || 500;
                this.autoPlaySpeed = this.autoPlaySpeed || 1500;
                if (this.autoPlay) {
                    this.autoPlayFunction(true);
                }
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.height) {
                    /** @type {?} */
                    var highest_1 = 0;
                    this.items.forEach(( /**
                     * @param {?} itemELement
                     * @return {?}
                     */function (itemELement) {
                        if (itemELement.el.nativeElement.offsetHeight > highest_1) {
                            highest_1 = itemELement.el.nativeElement.offsetHeight;
                        }
                    }));
                    this.height = highest_1 + "px";
                }
                else {
                    this.items.forEach(( /**
                     * @param {?} itemELement
                     * @return {?}
                     */function (itemELement) {
                        itemELement.el.nativeElement.style.overflowY = 'auto';
                    }));
                }
                this.items.forEach(( /**
                 * @param {?} itemELement
                 * @return {?}
                 */function (itemELement) {
                    itemELement.el.nativeElement.style.height = _this.height;
                }));
                this.el.nativeElement.style.height = this.height;
                this.el.nativeElement.style.width = this.width;
                if (this.items && this.items.length > 0) {
                    this.onChange.emit(0);
                    this._width = this.items.first.el.nativeElement.offsetWidth;
                }
                this.firstItemIndex = 0;
                this.lastItemIndex = this.items.length - 1;
                if (!this.fade) {
                    this.items.toArray().forEach(( /**
                     * @param {?} item
                     * @param {?} itemIndex
                     * @return {?}
                     */function (item, itemIndex) {
                        item.speed = _this.speed;
                        item.position = _this._width * itemIndex;
                        item.currentPosition = item.position;
                        item.disableTransition();
                        item.moveTo(item.position);
                    }));
                }
                else {
                    this.items.forEach(( /**
                     * @param {?} item
                     * @param {?} index
                     * @return {?}
                     */function (item, index) {
                        item.zIndex = _this.items.length - index;
                        item.setzIndex(item.zIndex);
                    }));
                }
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.items.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        item.colorConfig = _this.colorConfig;
                    }));
                }), 50);
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.onPrintClick = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var currentEl = this.items.toArray()[this.currentItemIndex].el;
                this.printRequest.emit(currentEl);
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.next = /**
         * @return {?}
         */
            function () {
                this.slideRight();
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.prev = /**
         * @return {?}
         */
            function () {
                this.slideLeft();
            };
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.goTo = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (!this.fade) {
                    this.slideTo(index);
                }
                else {
                    this.fadeTo(index);
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.rotateRightTo = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                while (index !== this.lastItemIndex) {
                    this.rotateRight();
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.rotateLeftTo = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                while (index !== this.firstItemIndex) {
                    this.rotateLeft();
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.slideTo = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var _this = this;
                this.onChange.emit((index + this.items.length) % this.items.length);
                /** @type {?} */
                var steps = this.currentItemIndex - index;
                if (this.infinite) {
                    if (steps > 0) {
                        this.rotateRightTo(this.currentItemIndex);
                    }
                    else if (steps < 0) {
                        this.rotateLeftTo(this.currentItemIndex);
                    }
                }
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.enableTransition();
                    _this.items.forEach(( /**
                     * @param {?} item
                     * @param {?} i
                     * @return {?}
                     */function (item, i) {
                        item.position += _this._width * (steps);
                        item.currentPosition = item.position;
                        item.moveTo(item.position);
                    }));
                    _this.currentItemIndex = (index + _this.items.length) % _this.items.length;
                }), 50);
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.slideLeft = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.isSliding) {
                    this.isSliding = true;
                    if (!this.infinite) {
                        if (this.currentItemIndex === 0) {
                            this.slideToPrevPosition();
                            return;
                        }
                    }
                    this.slideTo(this.currentItemIndex - 1);
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.isSliding = false;
                    }), this.speed);
                }
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.slideRight = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.isSliding) {
                    this.isSliding = true;
                    if (!this.infinite) {
                        if (this.currentItemIndex === this.items.length - 1) {
                            this.slideToPrevPosition();
                            return;
                        }
                    }
                    this.slideTo(this.currentItemIndex + 1);
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.isSliding = false;
                    }), this.speed);
                }
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.slideToPrevPosition = /**
         * @return {?}
         */
            function () {
                this.enableTransition();
                this.items.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    item.currentPosition = item.position;
                    item.moveTo(item.position);
                }));
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.disableTransition = /**
         * @return {?}
         */
            function () {
                this.items.forEach(( /**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */function (item, index) {
                    item.disableTransition();
                }));
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.enableTransition = /**
         * @return {?}
         */
            function () {
                this.items.forEach(( /**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */function (item, index) {
                    item.enableTransition();
                }));
            };
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.getItemByIndex = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.items.find(( /**
                 * @param {?} item
                 * @param {?} i
                 * @return {?}
                 */function (item, i) {
                    return i === index;
                }));
            };
        /**
         * @param {?} item
         * @return {?}
         */
        UiCarouselComponent.prototype.getIndexByItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.items.toArray().indexOf(item);
            };
        /**
         * @param {?} n
         * @return {?}
         */
        UiCarouselComponent.prototype.rotateRightNTimes = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                for (var i = 0; i < n; i++) {
                    this.rotateRight();
                }
            };
        /**
         * @param {?} n
         * @return {?}
         */
        UiCarouselComponent.prototype.rotateLeftNTimes = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                for (var i = 0; i < n; i++) {
                    this.rotateLeft();
                }
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.rotateRight = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var firstItemRef = this.getItemByIndex(this.firstItemIndex);
                /** @type {?} */
                var lastItemRef = this.getItemByIndex(this.lastItemIndex);
                if (!this.fade) {
                    lastItemRef.position = firstItemRef.position - this._width;
                    lastItemRef.currentPosition = lastItemRef.position;
                    lastItemRef.disableTransition();
                    lastItemRef.moveTo(lastItemRef.position);
                    this.firstItemIndex = this.lastItemIndex;
                    this.lastItemIndex = (this.lastItemIndex - 1 + this.items.length) % this.items.length;
                }
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.rotateLeft = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var firstItemRef = this.getItemByIndex(this.firstItemIndex);
                /** @type {?} */
                var lastItemRef = this.getItemByIndex(this.lastItemIndex);
                firstItemRef.position = lastItemRef.position + this._width;
                firstItemRef.currentPosition = firstItemRef.position;
                firstItemRef.disableTransition();
                firstItemRef.moveTo(firstItemRef.position);
                this.lastItemIndex = this.firstItemIndex;
                this.firstItemIndex = (this.lastItemIndex + 1) % this.items.length;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.fadeTo = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.onChange.emit(index);
                /** @type {?} */
                var firstItem = this.getItemByIndex(this.currentItemIndex);
                /** @type {?} */
                var targetItem = this.getItemByIndex(index);
                /** @type {?} */
                var highestZIndex = this.items.length;
                targetItem.zIndex = firstItem.zIndex + 1;
                targetItem.setzIndex(targetItem.zIndex);
                targetItem.disableTransition();
                targetItem.fadeIn(this.speed);
                this.currentItemIndex = index;
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.fadeRight = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var newIndex = (this.currentItemIndex + 1) % this.items.length;
                this.fadeTo(newIndex);
                this.currentItemIndex = newIndex;
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.fadeLeft = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var newIndex = (this.currentItemIndex - 1 + this.items.length) % this.items.length;
                this.fadeTo(newIndex);
                this.currentItemIndex = newIndex;
            };
        // is item first visually and not necessary first in the dom (QueryList)
        // is item first visually and not necessary first in the dom (QueryList)
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.isItemFirst =
            // is item first visually and not necessary first in the dom (QueryList)
            /**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                return this.firstItemIndex === index;
            };
        // is item last visually and not necessary last in the dom (QueryList)
        // is item last visually and not necessary last in the dom (QueryList)
        /**
         * @param {?} index
         * @return {?}
         */
        UiCarouselComponent.prototype.isItemLast =
            // is item last visually and not necessary last in the dom (QueryList)
            /**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                return this.lastItemIndex === index;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        UiCarouselComponent.prototype.onResize = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.rePosition();
            };
        /**
         * @return {?}
         */
        UiCarouselComponent.prototype.rePosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var items = this.items.toArray();
                if (this.items && this.items.length > 0) {
                    this._width = this.items.first.el.nativeElement.offsetWidth;
                }
                items.sort(( /**
                 * @param {?} item1
                 * @param {?} item2
                 * @return {?}
                 */function (item1, item2) {
                    if (item1.position > item2.position) {
                        return 1;
                    }
                    else if (item1.position < item2.position) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                }));
                /** @type {?} */
                var currentItem = this.getItemByIndex(this.currentItemIndex);
                /** @type {?} */
                var currentItemIndex = items.indexOf(currentItem);
                for (var i = currentItemIndex; i < items.length + currentItemIndex; i++) {
                    /** @type {?} */
                    var item = items[(i + items.length) % items.length];
                    item.position = ((i + items.length) % items.length - currentItemIndex) * this._width;
                    item.disableTransition();
                    item.moveTo(item.position);
                }
            };
        /**
         * @param {?} shouldAutoPlay
         * @return {?}
         */
        UiCarouselComponent.prototype.autoPlayFunction = /**
         * @param {?} shouldAutoPlay
         * @return {?}
         */
            function (shouldAutoPlay) {
                var _this = this;
                if (this.autoPlay) {
                    if (shouldAutoPlay) {
                        this.interval = setInterval(( /**
                         * @return {?}
                         */function () {
                            _this.next();
                        }), this.autoPlaySpeed);
                    }
                    else {
                        clearInterval(this.interval);
                    }
                }
            };
        UiCarouselComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'ngx-ui-carousel',
                        template: "\n    <div (mouseenter)=\"(autoPlay)?autoPlayFunction(false):null\" (mouseleave)=\"(autoPlay)?autoPlayFunction(true):null\">\n      <ng-content></ng-content>\n      <dots\n        *ngIf=\"isDotsVisible && items.length > 1\"\n        [dotsCount]=\"items.length\"\n        position=\"middle\"\n        [activeDot]=\"currentItemIndex\"\n        [colorConfig]=\"colorConfig\"\n        (onClick)=\"goTo($event)\"></dots>\n      <arrow *ngIf=\"isArrowsVisible && items.length > 1\" dir=\"left\" (onArrowClick)=\"prev()\" [disabled]=\"false\" [colorConfig]=\"colorConfig\"></arrow>\n      <arrow *ngIf=\"isArrowsVisible && items.length > 1\" dir=\"right\" (onArrowClick)=\"next()\" [disabled]=\"false\" [colorConfig]=\"colorConfig\"></arrow>\n      <print-button\n        *ngIf=\"isPrintButtonVisible\"\n        (onButtonClick)=\"onPrintClick()\"\n        [colorConfig]=\"colorConfig\"\n        [disabled]=\"false\"></print-button>\n    </div>\n  ",
                        styles: ["\n    :host {\n      display: block;\n      overflow: hidden;\n      position: relative;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        UiCarouselComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        UiCarouselComponent.propDecorators = {
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            speed: [{ type: i0.Input }],
            autoPlay: [{ type: i0.Input }],
            autoPlaySpeed: [{ type: i0.Input }],
            infinite: [{ type: i0.Input }],
            fade: [{ type: i0.Input }],
            isDotsVisible: [{ type: i0.Input }],
            isArrowsVisible: [{ type: i0.Input }],
            isPrintButtonVisible: [{ type: i0.Input }],
            colorConfig: [{ type: i0.Input }],
            onChange: [{ type: i0.Output }],
            printRequest: [{ type: i0.Output }],
            items: [{ type: i0.ContentChildren, args: [UiCarouselItemComponent,] }],
            onResize: [{ type: i0.HostListener, args: ['window:resize', ['$event'],] }]
        };
        return UiCarouselComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ArrowComponent = /** @class */ (function () {
        function ArrowComponent(_el, _renderer2) {
            this._el = _el;
            this._renderer2 = _renderer2;
            this.disabled = true;
            this.onArrowClick = new i0.EventEmitter();
        }
        Object.defineProperty(ArrowComponent.prototype, "colorConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this._colorConfig;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._colorConfig = value;
                this.createStyle();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ArrowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this._colorConfig) {
                    this.colorConfig = new UiCarouselColorConfig();
                }
            };
        /**
         * @return {?}
         */
        ArrowComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (!this.disabled) {
                    this.onArrowClick.emit();
                    this.createStyle();
                }
            };
        /**
         * @return {?}
         */
        ArrowComponent.prototype.createStyle = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var styling = "\n      .arrow::before, .arrow::after {\n        background: " + this.colorConfig.arrowColor + ";\n      }\n      ";
                if (this.styleElement) {
                    this._renderer2.removeChild(this._renderer2.parentNode(this.styleElement), this.styleElement);
                }
                this.styleElement = this._renderer2.createElement('style');
                this.styleElement.appendChild(this._renderer2.createText(styling));
                this._el.nativeElement.appendChild(this.styleElement);
            };
        ArrowComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'arrow',
                        template: "\n    <div #arrow class=\"arrow\" (click)=\"onClick()\"\n      [ngClass]=\"{'left': dir === 'left', 'right': dir === 'right', 'disabled': disabled}\">\n      <style #shadow-styling [innerHTML]=\"styling\">\n      </style>\n      </div>\n  ",
                        styles: ["\n  .arrow {\n    position: absolute;\n    height: 50px;\n    width: 30px;\n    opacity: .6;\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none;\n    z-index: 1000;\n  }\n\n  .arrow.right {\n    right: 15px;\n    top: 50%;\n\n    transform: scaleX(-1) translateY(-50%);\n    -moz-transform: scaleX(-1) translateY(-50%);\n    -o-transform: scaleX(-1) translateY(-50%);\n    -webkit-transform: scaleX(-1) translateY(-50%);\n    -ms-transform: scaleX(-1) translateY(-50%);\n    filter: FlipH;\n    -ms-filter: \"FlipH\";\n  }\n\n  .arrow.left{\n    left: 15px;\n    top: 50%;\n    transform: translateY(-50%);\n    -moz-transform: translateY(-50%);\n    -webkit-transform: translateY(-50%);\n    -o-transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n  }\n\n  .arrow:hover{\n    opacity: .8;\n    cursor: pointer;\n  }\n\n  .arrow:before{\n    content: \"\";\n    height: 3px;\n    width: 30px;\n    display: block;\n    position: absolute;\n    top: 14px;\n    transform: rotate(-45deg);\n    -moz-transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    -o-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n  }\n  .arrow:after{\n    content: \"\";\n    height: 3px;\n    width: 30px;\n    display: block;\n    transform: rotate(45deg);\n    -moz-transform: rotate(45deg);\n    -webkit-transform: rotate(45deg);\n    -o-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    position: absolute;\n    bottom: 14px;\n  }\n  .arrow.disabled{\n    opacity: .4;\n  }\n  .arrow.disabled:hover{\n    opacity: .4;\n    cursor: pointer;\n  }"]
                    }] }
        ];
        /** @nocollapse */
        ArrowComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        ArrowComponent.propDecorators = {
            dir: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            colorConfig: [{ type: i0.Input, args: ['colorConfig',] }],
            onArrowClick: [{ type: i0.Output }]
        };
        return ArrowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DotsComponent = /** @class */ (function () {
        function DotsComponent() {
            this.activeDot = 0;
            this.colorConfig = new UiCarouselColorConfig();
            this.position = 'left';
            this.onClick = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        DotsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.numbers = Array(this.dotsCount).fill(0).map(( /**
                 * @param {?} x
                 * @param {?} i
                 * @return {?}
                 */function (x, i) { return i; }));
            };
        /**
         * @param {?} index
         * @return {?}
         */
        DotsComponent.prototype.click = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.onClick.emit(index);
                this.activeDot = index;
            };
        DotsComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'dots',
                        template: "\n    <div class=\"dot\" [ngStyle]=\"{'background-color': colorConfig.dotsColor}\"\n      *ngFor=\"let number of numbers\"\n      (click)=\"click(number)\"\n      [class.active]=\"activeDot === number\">\n    </div>\n  ",
                        styles: ["\n      :host{\n          position: absolute;\n          display: inline-block;\n          z-index: 1000;\n      }\n\n      :host(.left){\n          bottom: 10px;\n          left: 10px;\n      }\n\n      :host(.right){\n          bottom: 10px;\n          right: 10px;\n      }\n\n      :host(.middle){\n          bottom: 20px;\n          left: 50%;\n          transform: translateX(-50%);\n          -webkit-transform: translateX(-50%);\n          -moz-transform: translateX(-50%);\n          -o-transform: translateX(-50%);\n          -ms-transform: translateX(-50%);\n      }\n\n      .dot{\n          height: 10px;\n          width: 10px;\n          border-radius: 5px;\n          background: white;\n          opacity: .5;\n          margin: 0 4px;\n          display: inline-block;\n      }\n\n      .dot:hover{\n          opacity: .9;\n          cursor: pointer;\n      }\n\n      .dot.active{\n          opacity: .9;\n      }\n  "]
                    }] }
        ];
        /** @nocollapse */
        DotsComponent.ctorParameters = function () { return []; };
        DotsComponent.propDecorators = {
            activeDot: [{ type: i0.Input }],
            dotsCount: [{ type: i0.Input }],
            colorConfig: [{ type: i0.Input }],
            position: [{ type: i0.HostBinding, args: ['class',] }, { type: i0.Input }],
            onClick: [{ type: i0.Output }]
        };
        return DotsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ZERO = 0.000000000001;
    var SwiperDirective = /** @class */ (function () {
        function SwiperDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.isDown = false;
            this.initialPos = ZERO;
            this.lastPos = ZERO;
            this.swipeDistance = ZERO;
            this.firstSwipeDate = Date.now();
            this.onSwipeRight = new i0.EventEmitter();
            this.onSwipeLeft = new i0.EventEmitter();
            this.onSwipeStart = new i0.EventEmitter();
            this.onSwipeEnd = new i0.EventEmitter();
            this.swipeLeft = new i0.EventEmitter();
            this.swipeRight = new i0.EventEmitter();
        }
        // tslint:disable-next-line:use-life-cycle-interface
        // tslint:disable-next-line:use-life-cycle-interface
        /**
         * @return {?}
         */
        SwiperDirective.prototype.ngOnInit =
            // tslint:disable-next-line:use-life-cycle-interface
            /**
             * @return {?}
             */
            function () {
                this.onSwipeEnd.subscribe(( /**
                 * @return {?}
                 */function () {
                }));
                this.swipeLeft.subscribe(( /**
                 * @return {?}
                 */function () {
                    SwiperDirective.canISwipe = false;
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        SwiperDirective.canISwipe = true;
                    }), 350);
                }));
                this.swipeRight.subscribe(( /**
                 * @return {?}
                 */function () {
                    SwiperDirective.canISwipe = false;
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        SwiperDirective.canISwipe = true;
                    }), 350);
                }));
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SwiperDirective.prototype.onMouseDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!SwiperDirective.canISwipe) {
                    return;
                }
                this.firstSwipeDate = Date.now();
                this.isDown = true;
                this.initialPos = event.clientX;
                this.swipeDistance = 0;
                this.onSwipeStart.emit();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SwiperDirective.prototype.onMouseUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDown) {
                    return;
                }
                this.initialPos = this.lastPos = ZERO;
                this.isDown = false;
                if (this.swipeDistance > 100) {
                    this.swipeLeft.emit();
                }
                else if (this.swipeDistance < -100) {
                    this.swipeRight.emit();
                }
                else {
                    this.onSwipeEnd.emit();
                }
                this.swipeDistance = ZERO;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SwiperDirective.prototype.onMouseMove = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.isDown) {
                    /** @type {?} */
                    var swipeFrameDistance = event.clientX - this.initialPos - this.lastPos;
                    this.swipeDistance += swipeFrameDistance;
                    this.lastPos = event.clientX - this.initialPos;
                    if (swipeFrameDistance > 0) {
                        this.onSwipeLeft.emit(swipeFrameDistance);
                    }
                    else {
                        this.onSwipeRight.emit(swipeFrameDistance);
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SwiperDirective.prototype.onTouchMove = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!SwiperDirective.canISwipe) {
                    return;
                }
                /** @type {?} */
                var touch = event.touches[0] || event.changedTouches[0];
                /** @type {?} */
                var swipeFrameDistance = touch.clientX - this.initialPos - this.lastPos;
                swipeFrameDistance = swipeFrameDistance < 30 ? swipeFrameDistance : 30;
                this.swipeDistance += swipeFrameDistance;
                this.lastPos = touch.clientX - this.initialPos;
                if (swipeFrameDistance > 0) {
                    this.onSwipeLeft.emit(swipeFrameDistance);
                }
                else {
                    this.onSwipeRight.emit(swipeFrameDistance);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SwiperDirective.prototype.onTouchStart = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!SwiperDirective.canISwipe) {
                    return;
                }
                /** @type {?} */
                var touch = event.touches[0] || event.changedTouches[0];
                this.firstSwipeDate = Date.now();
                this.initialPos = touch.clientX;
                this.swipeDistance = ZERO;
                this.onSwipeStart.emit();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SwiperDirective.prototype.onTouchEnd = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.initialPos = this.lastPos = ZERO;
                if (this.swipeDistance > 100) {
                    this.swipeLeft.emit();
                }
                else if (this.swipeDistance < -100) {
                    this.swipeRight.emit();
                }
                else {
                    this.onSwipeEnd.emit();
                }
                this.swipeDistance = ZERO;
            };
        SwiperDirective.canISwipe = true;
        SwiperDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[libSwiper]',
                        exportAs: 'swiper'
                    },] }
        ];
        /** @nocollapse */
        SwiperDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        SwiperDirective.propDecorators = {
            onSwipeRight: [{ type: i0.Output }],
            onSwipeLeft: [{ type: i0.Output }],
            onSwipeStart: [{ type: i0.Output }],
            onSwipeEnd: [{ type: i0.Output }],
            swipeLeft: [{ type: i0.Output }],
            swipeRight: [{ type: i0.Output }],
            onMouseDown: [{ type: i0.HostListener, args: ['mousedown', ['$event'],] }],
            onMouseUp: [{ type: i0.HostListener, args: ['document:mouseup', ['$event'],] }],
            onMouseMove: [{ type: i0.HostListener, args: ['mousemove', ['$event'],] }],
            onTouchMove: [{ type: i0.HostListener, args: ['touchmove', ['$event'],] }],
            onTouchStart: [{ type: i0.HostListener, args: ['touchstart', ['$event'],] }],
            onTouchEnd: [{ type: i0.HostListener, args: ['touchend', ['$event'],] }]
        };
        return SwiperDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PrintButtonComponent = /** @class */ (function () {
        function PrintButtonComponent(_el, _renderer2) {
            this._el = _el;
            this._renderer2 = _renderer2;
            this.disabled = true;
            this.colorConfig = new UiCarouselColorConfig();
            this.onButtonClick = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        PrintButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        PrintButtonComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (!this.disabled) {
                    this.onButtonClick.emit();
                }
            };
        PrintButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'print-button',
                        template: "\n    <div #printButton\n    class=\"print-button\"\n    (click)=\"onClick()\"\n    [ngClass]=\"{'disabled': disabled}\"\n    [ngStyle]=\"{'background-color': colorConfig.printButtonBackgroundColor}\">\n      <span [ngStyle]=\"{'color': colorConfig.printButtonFontColor}\">print</span>\n    </div>\n  ",
                        styles: ["\n  .print-button {\n    position: absolute;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n    border-radius: 5px;\n    width: 60px;\n    opacity: .6;\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none;\n    z-index: 1000;\n    right: 20px;\n    top: 20px;\n  }\n\n  .print-button.disabled{\n    opacity: .4;\n  }\n  .print-button:hover{\n    opacity: .9;\n    cursor: pointer;\n  }\n  .print-button.disabled:hover{\n    opacity: .4;\n    cursor: pointer;\n  }"]
                    }] }
        ];
        /** @nocollapse */
        PrintButtonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        PrintButtonComponent.propDecorators = {
            dir: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            colorConfig: [{ type: i0.Input }],
            onButtonClick: [{ type: i0.Output }]
        };
        return PrintButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiCarouselModule = /** @class */ (function () {
        function UiCarouselModule() {
        }
        UiCarouselModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            SwiperDirective,
                            UILazyloadDirective,
                            DotsComponent,
                            ArrowComponent,
                            UiCarouselComponent,
                            UiCarouselItemComponent,
                            PrintButtonComponent
                        ],
                        imports: [
                            common.CommonModule,
                        ],
                        exports: [
                            UiCarouselComponent,
                            UiCarouselItemComponent,
                            DotsComponent,
                            ArrowComponent,
                            SwiperDirective,
                            UILazyloadDirective,
                            SwiperDirective
                        ]
                    },] }
        ];
        return UiCarouselModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.UiCarouselService = UiCarouselService;
    exports.UiCarouselComponent = UiCarouselComponent;
    exports.ArrowComponent = ArrowComponent;
    exports.DotsComponent = DotsComponent;
    exports.UiCarouselItemComponent = UiCarouselItemComponent;
    exports.UILazyloadDirective = UILazyloadDirective;
    exports.SwiperDirective = SwiperDirective;
    exports.UiCarouselModule = UiCarouselModule;
    exports.UiCarouselColorConfig = UiCarouselColorConfig;
    exports.PrintButtonComponent = PrintButtonComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-ui-carousel.umd.js.map