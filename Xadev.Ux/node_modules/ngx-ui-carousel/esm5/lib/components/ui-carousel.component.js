/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ContentChildren, QueryList, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { UiCarouselItemComponent } from './ui-carousel-item.component';
import { UiCarouselColorConfig } from '../color-config.class';
var UiCarouselComponent = /** @class */ (function () {
    function UiCarouselComponent(el, renderer2) {
        this.el = el;
        this.renderer2 = renderer2;
        this.width = '100%';
        this.autoPlay = true;
        this.infinite = true;
        this.fade = false;
        this.isDotsVisible = true;
        this.isArrowsVisible = true;
        this.isPrintButtonVisible = false;
        this.colorConfig = new UiCarouselColorConfig();
        this.onChange = new EventEmitter();
        this.printRequest = new EventEmitter();
        this.currentItemIndex = 0;
    }
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.speed = this.speed || 500;
        this.autoPlaySpeed = this.autoPlaySpeed || 1500;
        if (this.autoPlay) {
            this.autoPlayFunction(true);
        }
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.height) {
            /** @type {?} */
            var highest_1 = 0;
            this.items.forEach((/**
             * @param {?} itemELement
             * @return {?}
             */
            function (itemELement) {
                if (itemELement.el.nativeElement.offsetHeight > highest_1) {
                    highest_1 = itemELement.el.nativeElement.offsetHeight;
                }
            }));
            this.height = highest_1 + "px";
        }
        else {
            this.items.forEach((/**
             * @param {?} itemELement
             * @return {?}
             */
            function (itemELement) {
                itemELement.el.nativeElement.style.overflowY = 'auto';
            }));
        }
        this.items.forEach((/**
         * @param {?} itemELement
         * @return {?}
         */
        function (itemELement) {
            itemELement.el.nativeElement.style.height = _this.height;
        }));
        this.el.nativeElement.style.height = this.height;
        this.el.nativeElement.style.width = this.width;
        if (this.items && this.items.length > 0) {
            this.onChange.emit(0);
            this._width = this.items.first.el.nativeElement.offsetWidth;
        }
        this.firstItemIndex = 0;
        this.lastItemIndex = this.items.length - 1;
        if (!this.fade) {
            this.items.toArray().forEach((/**
             * @param {?} item
             * @param {?} itemIndex
             * @return {?}
             */
            function (item, itemIndex) {
                item.speed = _this.speed;
                item.position = _this._width * itemIndex;
                item.currentPosition = item.position;
                item.disableTransition();
                item.moveTo(item.position);
            }));
        }
        else {
            this.items.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                item.zIndex = _this.items.length - index;
                item.setzIndex(item.zIndex);
            }));
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.colorConfig = _this.colorConfig;
            }));
        }), 50);
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.onPrintClick = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentEl = this.items.toArray()[this.currentItemIndex].el;
        this.printRequest.emit(currentEl);
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.slideRight();
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.slideLeft();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.goTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (!this.fade) {
            this.slideTo(index);
        }
        else {
            this.fadeTo(index);
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.rotateRightTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        while (index !== this.lastItemIndex) {
            this.rotateRight();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.rotateLeftTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        while (index !== this.firstItemIndex) {
            this.rotateLeft();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.slideTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        this.onChange.emit((index + this.items.length) % this.items.length);
        /** @type {?} */
        var steps = this.currentItemIndex - index;
        if (this.infinite) {
            if (steps > 0) {
                this.rotateRightTo(this.currentItemIndex);
            }
            else if (steps < 0) {
                this.rotateLeftTo(this.currentItemIndex);
            }
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.enableTransition();
            _this.items.forEach((/**
             * @param {?} item
             * @param {?} i
             * @return {?}
             */
            function (item, i) {
                item.position += _this._width * (steps);
                item.currentPosition = item.position;
                item.moveTo(item.position);
            }));
            _this.currentItemIndex = (index + _this.items.length) % _this.items.length;
        }), 50);
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.slideLeft = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isSliding) {
            this.isSliding = true;
            if (!this.infinite) {
                if (this.currentItemIndex === 0) {
                    this.slideToPrevPosition();
                    return;
                }
            }
            this.slideTo(this.currentItemIndex - 1);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.isSliding = false;
            }), this.speed);
        }
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.slideRight = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isSliding) {
            this.isSliding = true;
            if (!this.infinite) {
                if (this.currentItemIndex === this.items.length - 1) {
                    this.slideToPrevPosition();
                    return;
                }
            }
            this.slideTo(this.currentItemIndex + 1);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.isSliding = false;
            }), this.speed);
        }
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.slideToPrevPosition = /**
     * @return {?}
     */
    function () {
        this.enableTransition();
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.currentPosition = item.position;
            item.moveTo(item.position);
        }));
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.disableTransition = /**
     * @return {?}
     */
    function () {
        this.items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.disableTransition();
        }));
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.enableTransition = /**
     * @return {?}
     */
    function () {
        this.items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.enableTransition();
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.getItemByIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.items.find((/**
         * @param {?} item
         * @param {?} i
         * @return {?}
         */
        function (item, i) {
            return i === index;
        }));
    };
    /**
     * @param {?} item
     * @return {?}
     */
    UiCarouselComponent.prototype.getIndexByItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.items.toArray().indexOf(item);
    };
    /**
     * @param {?} n
     * @return {?}
     */
    UiCarouselComponent.prototype.rotateRightNTimes = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        for (var i = 0; i < n; i++) {
            this.rotateRight();
        }
    };
    /**
     * @param {?} n
     * @return {?}
     */
    UiCarouselComponent.prototype.rotateLeftNTimes = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        for (var i = 0; i < n; i++) {
            this.rotateLeft();
        }
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.rotateRight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstItemRef = this.getItemByIndex(this.firstItemIndex);
        /** @type {?} */
        var lastItemRef = this.getItemByIndex(this.lastItemIndex);
        if (!this.fade) {
            lastItemRef.position = firstItemRef.position - this._width;
            lastItemRef.currentPosition = lastItemRef.position;
            lastItemRef.disableTransition();
            lastItemRef.moveTo(lastItemRef.position);
            this.firstItemIndex = this.lastItemIndex;
            this.lastItemIndex = (this.lastItemIndex - 1 + this.items.length) % this.items.length;
        }
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.rotateLeft = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstItemRef = this.getItemByIndex(this.firstItemIndex);
        /** @type {?} */
        var lastItemRef = this.getItemByIndex(this.lastItemIndex);
        firstItemRef.position = lastItemRef.position + this._width;
        firstItemRef.currentPosition = firstItemRef.position;
        firstItemRef.disableTransition();
        firstItemRef.moveTo(firstItemRef.position);
        this.lastItemIndex = this.firstItemIndex;
        this.firstItemIndex = (this.lastItemIndex + 1) % this.items.length;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.fadeTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.onChange.emit(index);
        /** @type {?} */
        var firstItem = this.getItemByIndex(this.currentItemIndex);
        /** @type {?} */
        var targetItem = this.getItemByIndex(index);
        /** @type {?} */
        var highestZIndex = this.items.length;
        targetItem.zIndex = firstItem.zIndex + 1;
        targetItem.setzIndex(targetItem.zIndex);
        targetItem.disableTransition();
        targetItem.fadeIn(this.speed);
        this.currentItemIndex = index;
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.fadeRight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newIndex = (this.currentItemIndex + 1) % this.items.length;
        this.fadeTo(newIndex);
        this.currentItemIndex = newIndex;
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.fadeLeft = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newIndex = (this.currentItemIndex - 1 + this.items.length) % this.items.length;
        this.fadeTo(newIndex);
        this.currentItemIndex = newIndex;
    };
    // is item first visually and not necessary first in the dom (QueryList)
    // is item first visually and not necessary first in the dom (QueryList)
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.isItemFirst = 
    // is item first visually and not necessary first in the dom (QueryList)
    /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.firstItemIndex === index;
    };
    // is item last visually and not necessary last in the dom (QueryList)
    // is item last visually and not necessary last in the dom (QueryList)
    /**
     * @param {?} index
     * @return {?}
     */
    UiCarouselComponent.prototype.isItemLast = 
    // is item last visually and not necessary last in the dom (QueryList)
    /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.lastItemIndex === index;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UiCarouselComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.rePosition();
    };
    /**
     * @return {?}
     */
    UiCarouselComponent.prototype.rePosition = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var items = this.items.toArray();
        if (this.items && this.items.length > 0) {
            this._width = this.items.first.el.nativeElement.offsetWidth;
        }
        items.sort((/**
         * @param {?} item1
         * @param {?} item2
         * @return {?}
         */
        function (item1, item2) {
            if (item1.position > item2.position) {
                return 1;
            }
            else if (item1.position < item2.position) {
                return -1;
            }
            else {
                return 0;
            }
        }));
        /** @type {?} */
        var currentItem = this.getItemByIndex(this.currentItemIndex);
        /** @type {?} */
        var currentItemIndex = items.indexOf(currentItem);
        for (var i = currentItemIndex; i < items.length + currentItemIndex; i++) {
            /** @type {?} */
            var item = items[(i + items.length) % items.length];
            item.position = ((i + items.length) % items.length - currentItemIndex) * this._width;
            item.disableTransition();
            item.moveTo(item.position);
        }
    };
    /**
     * @param {?} shouldAutoPlay
     * @return {?}
     */
    UiCarouselComponent.prototype.autoPlayFunction = /**
     * @param {?} shouldAutoPlay
     * @return {?}
     */
    function (shouldAutoPlay) {
        var _this = this;
        if (this.autoPlay) {
            if (shouldAutoPlay) {
                this.interval = setInterval((/**
                 * @return {?}
                 */
                function () {
                    _this.next();
                }), this.autoPlaySpeed);
            }
            else {
                clearInterval(this.interval);
            }
        }
    };
    UiCarouselComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ngx-ui-carousel',
                    template: "\n    <div (mouseenter)=\"(autoPlay)?autoPlayFunction(false):null\" (mouseleave)=\"(autoPlay)?autoPlayFunction(true):null\">\n      <ng-content></ng-content>\n      <dots\n        *ngIf=\"isDotsVisible && items.length > 1\"\n        [dotsCount]=\"items.length\"\n        position=\"middle\"\n        [activeDot]=\"currentItemIndex\"\n        [colorConfig]=\"colorConfig\"\n        (onClick)=\"goTo($event)\"></dots>\n      <arrow *ngIf=\"isArrowsVisible && items.length > 1\" dir=\"left\" (onArrowClick)=\"prev()\" [disabled]=\"false\" [colorConfig]=\"colorConfig\"></arrow>\n      <arrow *ngIf=\"isArrowsVisible && items.length > 1\" dir=\"right\" (onArrowClick)=\"next()\" [disabled]=\"false\" [colorConfig]=\"colorConfig\"></arrow>\n      <print-button\n        *ngIf=\"isPrintButtonVisible\"\n        (onButtonClick)=\"onPrintClick()\"\n        [colorConfig]=\"colorConfig\"\n        [disabled]=\"false\"></print-button>\n    </div>\n  ",
                    styles: ["\n    :host {\n      display: block;\n      overflow: hidden;\n      position: relative;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    UiCarouselComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    UiCarouselComponent.propDecorators = {
        height: [{ type: Input }],
        width: [{ type: Input }],
        speed: [{ type: Input }],
        autoPlay: [{ type: Input }],
        autoPlaySpeed: [{ type: Input }],
        infinite: [{ type: Input }],
        fade: [{ type: Input }],
        isDotsVisible: [{ type: Input }],
        isArrowsVisible: [{ type: Input }],
        isPrintButtonVisible: [{ type: Input }],
        colorConfig: [{ type: Input }],
        onChange: [{ type: Output }],
        printRequest: [{ type: Output }],
        items: [{ type: ContentChildren, args: [UiCarouselItemComponent,] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return UiCarouselComponent;
}());
export { UiCarouselComponent };
if (false) {
    /** @type {?} */
    UiCarouselComponent.prototype.height;
    /** @type {?} */
    UiCarouselComponent.prototype.width;
    /** @type {?} */
    UiCarouselComponent.prototype.speed;
    /** @type {?} */
    UiCarouselComponent.prototype.autoPlay;
    /** @type {?} */
    UiCarouselComponent.prototype.autoPlaySpeed;
    /** @type {?} */
    UiCarouselComponent.prototype.infinite;
    /** @type {?} */
    UiCarouselComponent.prototype.fade;
    /** @type {?} */
    UiCarouselComponent.prototype.isDotsVisible;
    /** @type {?} */
    UiCarouselComponent.prototype.isArrowsVisible;
    /** @type {?} */
    UiCarouselComponent.prototype.isPrintButtonVisible;
    /** @type {?} */
    UiCarouselComponent.prototype.colorConfig;
    /** @type {?} */
    UiCarouselComponent.prototype.onChange;
    /** @type {?} */
    UiCarouselComponent.prototype.printRequest;
    /** @type {?} */
    UiCarouselComponent.prototype.items;
    /** @type {?} */
    UiCarouselComponent.prototype.currentItemIndex;
    /** @type {?} */
    UiCarouselComponent.prototype.interval;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype._width;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.firstItemIndex;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.lastItemIndex;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.isSliding;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    UiCarouselComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,